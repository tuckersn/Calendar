import { ReadonlyDeep } from "type-fest";

import { RestEndpoint } from "./wrappers/rest-endpoint";

export enum TaskType {
	ShortTerm = 0,
	LongTerm = 1,
	StickyNote = 2
}

export function taskTypeToString(type: TaskType): string {
	switch (type) {
		case TaskType.ShortTerm:
			return "Short Term";
		case TaskType.LongTerm:
			return "Long Term";
		case TaskType.StickyNote:
			return "Sticky Note";
		default:
			throw new Error("Invalid TodoItemType");
	}
}

export function taskTypeFromString(type: string): TaskType {
	switch (type) {
		case "Short Term":
			return TaskType.ShortTerm;
		case "Long Term":
			return TaskType.LongTerm;
		case "Sticky Note":
			return TaskType.StickyNote;
		default:
			throw new Error("Invalid TodoItemType");
	}
}

export enum TaskStatus {
	Active = 0,
	Completed = 1,
	Inactive = 2
}

export function taskStatusToString(status: TaskStatus): string {
	switch (status) {
		case TaskStatus.Active:
			return "Active";
		case TaskStatus.Completed:
			return "Completed";
		case TaskStatus.Inactive:
			return "Inactive";
		default:
			throw new Error("Invalid TodoItemStatus");
	}
}

export function taskStatusFromString(status: string): TaskStatus {
	switch (status) {
		case "Active":
			return TaskStatus.Active;
		case "Completed":
			return TaskStatus.Completed;
		case "Inactive":
			return TaskStatus.Inactive;
		default:
			throw new Error("Invalid TodoItemStatus");
	}
}

export interface TaskRecord {
	/**
	 * Auto generated incremental id
	 */
	id: number;
	/**
	 * URL safe UUID key generated by nanoid
	 */
	uuid: string;
	title: string;
	taskType: TaskType;
	status: TaskStatus;
	/**
	 * When should this item be completed by?
	 * This will be used by notifications and reminders.
	 */
	due: Date | null;
	/**
	 * Last time this item was updated.
	 */
	updated: Date | null;
	/**
	 * Completed time of this item.
	 */
	completed: Date | null;
	/**
	 * Set to NOW() by default.
	 */
	created: Date;
}

export type ClientTaskRecord = Pick<TaskRecord, 'uuid' | 'created' | 'completed' | 'taskType' | 'status' | 'updated' | 'title' | 'due'>

export type TaskRecordInsertRequiredFields = Pick<TaskRecord, 'title'>;
export type TaskRecordInsertOptionalFields = Pick<TaskRecord, 'taskType' | 'due' | 'updated' | 'completed' | 'status'>;
export type TaskRecordInsertFields = TaskRecordInsertRequiredFields & Partial<TaskRecordInsertOptionalFields>;

export const DEFAULT_TASK_RECORD_FIELDS: TaskRecordInsertOptionalFields = {
	taskType: TaskType.ShortTerm,
	status: TaskStatus.Active,
	due: null,
	updated: null,
	completed: null
};

export interface TaskQueryFunctions {
	// Standard queries
	getById: (id: number) => Promise<TaskRecord | null>;
	getByUUID: (uuid: string) => Promise<TaskRecord | null>;
	insert: (record: TaskRecordInsertFields) => Promise<TaskRecord>;
	update: (record: TaskRecord) => Promise<TaskRecord>;
	deleteById: (id: number) => Promise<void>;
	deleteByUUID: (uuid: string) => Promise<void>;
	
	// Specialized queries
	getUpcoming: () => Promise<TaskRecord[]>;
	getRecentCreated: () => Promise<TaskRecord[]>;
	getRecentCompleted: () => Promise<TaskRecord[]>;
	getRecentUpdated: () => Promise<TaskRecord[]>;	
	getRecentInactive: () => Promise<TaskRecord[]>;	
}


export module TaskRestApi {

	export type TaskFilterParams = {
		id: string;
		uuid: string;
		status: string;
		itemType: string;
		completedBefore: string;
		completeAfter: string;
		createdBefore: string;
		createdAfter: string;
		updatedBefore: string;
		updatedAfter: string;
		dueBefore: string;
		dueAfter: string;
		orderBy: string;
	}

	/**
	 * [GET] /todo
	 */
	export type GetTask = RestEndpoint<TaskFilterParams, undefined, TaskRecord[]>;

	/**
	 * [POST] /todo
	 */
	export type CreateTask = RestEndpoint<{}, {
		title: string;
		itemType: string;
		dueDate: string;
		status: string;
	}, TaskRecord>;

	/**
	 * [PUT] /todo/:id
	 */
	export type UpdateTask = RestEndpoint<TaskFilterParams, {
		title?: string;
		itemType?: string;
		dueDate?: string;
		status?: string;
	}, TaskRecord>;
	
	/**
	 * [DELETE] /todo/:id
	 */
	export type DeleteTask = RestEndpoint<TaskFilterParams, undefined, TaskRecord>;

}